name: 'PipeCD Register Event'
description: 'Register an event to PipeCD'
inputs:
  api-address:
    description: 'gRPC address to the PipeCD api server'
    required: true
    default: ''
  api-key:
    description: 'API key to which the READ_WRITE role is attached'
    required: true
    default: ''
  event-name:
    description: 'The name of Event'
    required: true
    default: ''
  data:
    description: 'The string value of event data'
    required: true
    default: ''
  labels:
    description: 'The comma-separated list of labels for the event. Format: key=value,key2=value2'
    required: false
    default: ''
  contexts:
    description: 'Require pipectl >= v0.49.3. The comma-separated list of contexts for the event. Format: key=value,key2=value2'
    required: false
    default: ''
  commit-hash:
    description: 'The commit hash that triggers the event. Required if you want to use PipeCD Deployment Trace feature.'
    required: false
    default: ''
  commit-title:
    description: 'The title of the commit that triggers the event.'
    required: false
    default: ''
  commit-message:
    description: 'The message of the commit that triggers the event.'
    required: false
    default: ''
  commit-url:
    description: 'The URL of the commit that triggers the event.'
    required: false
    default: ''
  commit-author:
    description: 'The author of the commit that triggers the event.'
    required: false
    default: ''
  commit-timestamp:
    description: 'The timestamp of the commit that triggers the event.'
    required: false
    default: ''
  pipectl-version:
    description: 'The version of pipectl command. Release versions: https://github.com/pipe-cd/pipecd/releases'
    required: false
    default: 'v0.51.0'
runs:
  using: 'composite'
  steps:
    - name: download pipectl
      shell: bash -xe {0}
      run: |
        PLATFORM=""
        if [ "$(uname)" == 'Darwin' ]; then
          PLATFORM='darwin'
        elif [ "$(expr substr $(uname -s) 1 5)" == 'Linux' ]; then
          PLATFORM='linux'
        else
          echo "UNSUPPORTED PLATFORM!!: $(uname -a)" 1>&2
          exit 1
        fi

        ARCH=""
        if [ "$(uname -m)" == 'arm64' ]; then
          ARCH='arm64'
        elif [ "$(uname -m)" == 'aarch64' ]; then
          ARCH='arm64'
        elif [ "$(uname -m)" == 'x86_64' ]; then
          ARCH='amd64'
        else
          echo "UNSUPPORTED ARCHITECTURE!!: $(uname -a)" 1>&2
          exit 1
        fi

        PIPECTL=/tmp/pipecd-event-register/pipectl
        curl -L --silent --create-dirs -o ${PIPECTL} https://github.com/pipe-cd/pipecd/releases/download/${{ inputs.pipectl-version }}/pipectl_${{ inputs.pipectl-version }}_${PLATFORM}_${ARCH}
        chmod +x ${PIPECTL}

    - name: register event
      shell: bash -e {0}
      run: |
        PIPECTL=/tmp/pipecd-event-register/pipectl
        OPTIONS=(
          --address=${{ inputs.api-address }}
          --api-key=${{ inputs.api-key }}
          --name=${{ inputs.event-name }}
          --data=${{ inputs.data }}
        )

        if [ -n "${{ inputs.labels }}" ]; then
          OPTIONS+=(--labels=${{ inputs.labels }})
        fi

        if [ -n "${{ inputs.contexts }}" ]; then
          OPTIONS+=(--contexts=${{ inputs.contexts }})
        fi

        if [ -n "${{ inputs.commit-hash }}" ]; then
          OPTIONS+=(--commit-hash=${{ inputs.commit-hash }})
        fi

        if [ -n "${{ inputs.commit-title }}" ]; then
          OPTIONS+=(--commit-title=${{ inputs.commit-title }})
        fi

        if [ -n "${{ inputs.commit-message }}" ]; then
          OPTIONS+=(--commit-message=${{ inputs.commit-message }})
        fi

        if [ -n "${{ inputs.commit-url }}" ]; then
          OPTIONS+=(--commit-url=${{ inputs.commit-url }})
        fi

        if [ -n "${{ inputs.commit-author }}" ]; then
          OPTIONS+=(--commit-author=${{ inputs.commit-author }})
        fi

        if [ -n "${{ inputs.commit-timestamp }}" ]; then
          OPTIONS+=(--commit-timestamp=${{ inputs.commit-timestamp }})
        fi
        
        ${PIPECTL} event register "${OPTIONS[@]}"
